
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\003_extension_modes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_003_extension_modes.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_003_extension_modes.py:


Displaying signal extension modes
=================================

This example shows current extension modes finite support coefficients and narrow mirroring.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

Imports
-------

Import the necessary libraries and utility functions.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    from splineops.interpolate.tensorspline import TensorSpline








.. GENERATED FROM PYTHON SOURCE LINES 19-23

Function to create non-continuous signal
----------------------------------------

Create a signal that is mostly linear but introduces a "bump" at an arbitrary location.

.. GENERATED FROM PYTHON SOURCE LINES 23-36

.. code-block:: Python



    def create_signal_with_bump(x_values, bump_location=3, bump_width=0.5, bump_height=5):
        linear_part = x_values  # Linear function: f(x) = x
        bump = np.where(
            (x_values > (bump_location - bump_width / 2))
            & (x_values < (bump_location + bump_width / 2)),
            bump_height,
            0,
        )
        return linear_part + bump









.. GENERATED FROM PYTHON SOURCE LINES 37-41

Function to plot extension modes for signal
-------------------------------------------

Define a helper function to plot extension modes using the non-continuous function.

.. GENERATED FROM PYTHON SOURCE LINES 41-80

.. code-block:: Python



    def plot_extension_modes_for_bump_function(mode_name, x_values, title):
        plt.figure(figsize=(12, 6))

        # Create the signal with a bump
        data = create_signal_with_bump(x_values)

        # Create TensorSpline instance
        tensor_spline = TensorSpline(
            data=data, coordinates=(x_values,), bases="linear", modes=mode_name
        )

        # Define the extended evaluation grid (from -10 to 10)
        eval_x_values = np.linspace(-10, 10, 2000)
        eval_coords = (eval_x_values,)

        # Evaluate the tensor spline
        extended_data = tensor_spline.eval(coordinates=eval_coords)

        # Plot the results
        plt.plot(eval_x_values, extended_data, label="Extended Signal")

        # Add vertical lines at the boundaries of the original signal
        plt.axvline(
            x=x_values[0], color="red", linestyle="--", label="Original Signal Start"
        )
        plt.axvline(
            x=x_values[-1], color="blue", linestyle="--", label="Original Signal End"
        )

        plt.title(title)
        plt.xlabel("x")
        plt.ylabel("Interpolated Value")
        plt.grid(True)
        plt.legend()
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 81-83

Define x range
--------------

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    x_values = np.linspace(0, 6, 101)  # Use 101 points to ensure 0 (middle) is included








.. GENERATED FROM PYTHON SOURCE LINES 86-88

Plot for finite support coefficients
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 88-94

.. code-block:: Python

    plot_extension_modes_for_bump_function(
        mode_name="zero",  # Finite Support Coefficients is represented by "zero"
        x_values=x_values,
        title="Extension Mode: Finite Support Coefficients",
    )




.. image-sg:: /auto_examples/images/sphx_glr_003_extension_modes_001.png
   :alt: Extension Mode: Finite Support Coefficients
   :srcset: /auto_examples/images/sphx_glr_003_extension_modes_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-97

Plot for narrow mirroring
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 97-102

.. code-block:: Python

    plot_extension_modes_for_bump_function(
        mode_name="mirror",  # Narrow Mirroring is represented by "mirror"
        x_values=x_values,
        title="Extension Mode: Narrow Mirroring",
    )



.. image-sg:: /auto_examples/images/sphx_glr_003_extension_modes_002.png
   :alt: Extension Mode: Narrow Mirroring
   :srcset: /auto_examples/images/sphx_glr_003_extension_modes_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.223 seconds)


.. _sphx_glr_download_auto_examples_003_extension_modes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/splineops/splineops/main?urlpath=lab/tree/notebooks_binder/auto_examples/003_extension_modes.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../lite/lab/index.html?path=auto_examples/003_extension_modes.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 003_extension_modes.ipynb <003_extension_modes.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 003_extension_modes.py <003_extension_modes.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 003_extension_modes.zip <003_extension_modes.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
