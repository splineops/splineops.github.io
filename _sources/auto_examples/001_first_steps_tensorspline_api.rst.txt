
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/001_first_steps_tensorspline_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_001_first_steps_tensorspline_api.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_001_first_steps_tensorspline_api.py:


First steps with the TensorSpline API
=====================================

This example demonstrates how to create a basic interpolation using the TensorSpline API.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

Data preparation
----------------

Data type (need to provide floating numbers, "float64" and "float32" are typical).
Create random data samples and corresponding coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 14-31

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    from splineops.interpolate.tensorspline import TensorSpline

    dtype = "float32"

    nx, ny = 2, 5
    xmin, xmax = -3.1, +1
    ymin, ymax = 2, 6.5
    xx = np.linspace(xmin, xmax, nx, dtype=dtype)
    yy = np.linspace(ymin, ymax, ny, dtype=dtype)
    coordinates = xx, yy
    prng = np.random.default_rng(seed=5250)
    data = prng.standard_normal(size=tuple(c.size for c in coordinates))
    data = np.ascontiguousarray(data, dtype=dtype)








.. GENERATED FROM PYTHON SOURCE LINES 32-36

TensorSpline setup
-------------------

Tensor spline bases and signal extension modes.

.. GENERATED FROM PYTHON SOURCE LINES 36-44

.. code-block:: Python


    bases = "bspline3"  # same basis applied to all dimensions
    modes = "mirror"  # same mode applied to all dimensions

    tensor_spline = TensorSpline(
        data=data, coordinates=coordinates, bases=bases, modes=modes
    )








.. GENERATED FROM PYTHON SOURCE LINES 45-49

Evaluation coordinates
----------------------

Create evaluation coordinates (extended and oversampled in this case).

.. GENERATED FROM PYTHON SOURCE LINES 49-58

.. code-block:: Python


    dx = (xx[-1] - xx[0]) / (nx - 1)
    dy = (yy[-1] - yy[0]) / (ny - 1)
    pad_fct = 1.1
    px = pad_fct * nx * dx
    py = pad_fct * ny * dy
    eval_xx = np.linspace(xx[0] - px, xx[-1] + px, 100 * nx)
    eval_yy = np.linspace(yy[0] - py, yy[-1] + py, 100 * ny)








.. GENERATED FROM PYTHON SOURCE LINES 59-65

Next, there are three equally valid ways to do interpolation evaluation:

1) Standard evaluation
----------------------

Perform a standard evaluation on a grid of coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: Python


    eval_coords = eval_xx, eval_yy
    data_eval = tensor_spline(coordinates=eval_coords)








.. GENERATED FROM PYTHON SOURCE LINES 70-74

2) Meshgrid evaluation
----------------------

Evaluate using a meshgrid (not the default choice but could be useful in some cases).

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: Python


    eval_coords_mg = np.meshgrid(*eval_coords, indexing="ij")
    data_eval_mg = tensor_spline(coordinates=eval_coords_mg, grid=False)
    np.testing.assert_equal(data_eval, data_eval_mg)








.. GENERATED FROM PYTHON SOURCE LINES 80-84

3) Points evaluation
--------------------

Evaluate the tensor spline at a list of points directly.

.. GENERATED FROM PYTHON SOURCE LINES 84-89

.. code-block:: Python


    eval_coords_pts = np.reshape(eval_coords_mg, (2, -1))
    data_eval_pts = tensor_spline(coordinates=eval_coords_pts, grid=False)
    np.testing.assert_equal(data_eval, np.reshape(data_eval_pts, data_eval_mg.shape))








.. GENERATED FROM PYTHON SOURCE LINES 90-94

Visualization
-------------

Visualize the original data samples and the interpolated data.

.. GENERATED FROM PYTHON SOURCE LINES 94-116

.. code-block:: Python


    fig: plt.Figure
    ax: plt.Axes

    extent = [xx[0] - dx / 2, xx[-1] + dx / 2, yy[0] - dy / 2, yy[-1] + dy / 2]
    eval_extent = [
        eval_xx[0] - dx / 2,
        eval_xx[-1] + dx / 2,
        eval_yy[0] - dy / 2,
        eval_yy[-1] + dy / 2,
    ]

    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6), sharex="all", sharey="all")
    ax = axes[0]
    ax.imshow(data.T, extent=extent)
    ax.set_title("Original data samples")
    ax = axes[1]
    ax.imshow(data_eval.T, extent=eval_extent)
    ax.set_title("Interpolated data")

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_001_first_steps_tensorspline_api_001.png
   :alt: Original data samples, Interpolated data
   :srcset: /auto_examples/images/sphx_glr_001_first_steps_tensorspline_api_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.304 seconds)


.. _sphx_glr_download_auto_examples_001_first_steps_tensorspline_api.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/splineops/splineops.github.io/main?urlpath=lab/tree/notebooks_binder/auto_examples/001_first_steps_tensorspline_api.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../lite/lab/index.html?path=auto_examples/001_first_steps_tensorspline_api.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 001_first_steps_tensorspline_api.ipynb <001_first_steps_tensorspline_api.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 001_first_steps_tensorspline_api.py <001_first_steps_tensorspline_api.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 001_first_steps_tensorspline_api.zip <001_first_steps_tensorspline_api.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
